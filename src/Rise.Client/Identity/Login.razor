@page "/login"
@using Rise.Shared.Identity.Accounts
@inject IAccountManager AccountManager
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="notification">You're logged in as @authContext.User.Identity?.Name.</div>
        <div><strong>With the following claims:</strong>
            <div class="fixed-grid has-2-cols">
                <div class="grid is-gap-1">
                    <div class="cel"><strong>Type</strong></div>
                    <div class="cel"><strong>Value</strong></div>
                    @foreach (var claim in authContext.User.Claims)
                    {
                        <div class="cel">@claim.Type</div>
                        <div class="cel">@claim.Value</div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @foreach (var error in _result.Errors)
        {
            <div class="alert alert-danger">@error</div>
        }
        <div class="row">
            <div class="col">
                <section>
                    <EditForm Model="Model" OnValidSubmit="LoginUser" Context="formContext">
                        <FluentValidationValidator/>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Model.Email"
                                       id="Input.Email"
                                       class="form-control"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="name@example.com"/>
                            <label for="Input.Email" class="form-label">
                                Email
                            </label>
                            <ValidationMessage For="() => Model.Email"
                                               class="text-danger"/>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password"
                                       @bind-Value="Model.Password"
                                       id="Input.Password"
                                       class="form-control"
                                       autocomplete="current-password"
                                       aria-required="true"
                                       placeholder="password"/>
                            <label for="Input.Password" class="form-label">
                                Password
                            </label>
                            <ValidationMessage For="() => Model.Password"
                                               class="text-danger"/>
                        </div>
                        <div>
                            <button type="submit" class="button is-light">
                                Log in
                            </button>
                        </div>
                        <div class="mt-3">
                            <p>
                                <a href="register" class="">Register as a new user</a>
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private AccountRequest.Login Model = new();
    private Result _result = new();

    public async Task LoginUser()
    {
        _result = await AccountManager.LoginAsync(Model.Email!, Model.Password!);

        if (_result.IsSuccess && !string.IsNullOrEmpty(ReturnUrl))
        {
            Navigation.NavigateTo(ReturnUrl);
        }
    }
}
